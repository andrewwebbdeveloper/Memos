{"version":3,"sources":["images/leaves.jpg","utilities/Colors.js","functions/index.js","layouts/Main.js","layouts/Button.js","layouts/Modal.js","cards/Card.js","cards/Deck.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","color","shuffle","array","t","i","m","length","Math","floor","random","MainLayout","styled","div","_templateObject","PlayerArea","_templateObject2","CardArea","_templateObject3","StyledButton","button","Button_templateObject","Button","props","resetHandler","react_default","a","createElement","onClick","ModalContainer","Modal_templateObject","ModalStyle","Modal_templateObject2","Modal","_useState","useState","_useState2","Object","slicedToArray","winnerMessage","setWinnerMessage","firstPlayerScore","secondPlayerScore","firstPlayerWon","tieGame","useEffect","concat","layouts_Button","Card","id","isFlipped","disabled","cardHandler","cardColor","style","dist","flipDirection","flipOnClick","width","height","backgroundImage","Background","border","borderRadius","backgroundColor","borderColor","Deck","type","App","cards","setCards","_useState3","_useState4","setFlipped","_useState5","_useState6","solved","setSolved","_useState7","_useState8","setDisabled","_useState9","_useState10","setFirstPlayerScore","_useState11","_useState12","setSecondPlayerScore","_useState13","_useState14","winner","setWinner","_useState15","_useState16","player","setPlayer","resetCards","switchPlayer","scorePlayer","toConsumableArray","includes","sameCardClickedTwice","pop","setTimeout","clickedCard","find","card","isAMatch","layouts_Modal","Fragment","background","opacity","map","cards_Card","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.24e500db.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/leaves.b7eea58a.jpg\";","// My Colors\nexport const color = {\n  black: '#494747',\n  white: '#F2E6E6',\n  red: '#E2001A',\n  blue: '#21A8A3'\n};\n","//  The Fisher–Yates Shuffle\n\nexport function shuffle(array) {\n  var m = array.length,\n    t,\n    i;\n\n  // While there remain elements to shuffle…\n  while (m) {\n    // Pick a remaining element…\n    i = Math.floor(Math.random() * m--);\n\n    // And swap it with the current element.\n    t = array[m];\n    array[m] = array[i];\n    array[i] = t;\n  }\n\n  return array;\n}\n\nexport function isMatch(props) {\n  if (this.props.selection.length === 1) {\n    console.log('true');\n  }\n}\n","import styled from 'styled-components';\nimport { color } from '../utilities';\n\nexport const MainLayout = styled.div`\n  background: ${color.black};\n  width: 100%;\n  height: 100vh;\n  overflow: hidden;\n  display: grid;\n  grid-template-columns: minmax(3rem, 1fr) 6fr minmax(3rem, 1fr);\n  justify-items: center;\n`;\n\nexport const PlayerArea = styled.div`\n  width: 100%;\n  height: 100vh;\n  padding-top: 3rem;\n  display: flex;\n  flex-direction: column;\n  justify-items: left;\n  align-items: center;\n  transition: ease-in-out 0.2s opacity;\n  h2 {\n    color: ${color.white};\n    font-size: 2vmax;\n  }\n  h1 {\n    color: ${color.white};\n    font-size: 6vmax;\n    justify-content: center;\n  }\n`;\n\nexport const CardArea = styled.div`\n  padding: 2rem 0 2rem 0;\n  width: 90%;\n  height: 0;\n  display: grid;\n  justify-content: center;\n  grid-template-columns: repeat(4, min-content);\n  grid-gap: 3vmax;\n`;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { color } from '../utilities';\n\nconst StyledButton = styled.button`\n  padding: 1rem;\n  margin: 1rem;\n  background-color: #73b66b;\n  grid-row: 4;\n  grid-column: 2 / span 2;\n  color: ${color.white};\n  border: none;\n  outline: none;\n  border-radius: 0.5rem;\n  font-size: 1.3rem;\n  font-weight: 700; \n  transition: all ease-in-out 0.3s;\n  box-shadow: 0 2px 1px #404040;\n  &:hover {\n    box-shadow: 0 5px 3px #404040;\n    transform: translateY(-0.1rem);\n  }\n  &:active {\n    box-shadow: 0 5px 3px #404040;\n    transform: translateY(0.1rem);\n    background-color: #86d67d;\n  }\n`;\n\nconst Button = props => {\n  const { resetHandler } = props;\n  return <StyledButton onClick={() => resetHandler()}>RESTART</StyledButton>;\n};\n\nexport default Button;\n","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { color } from '../utilities';\nimport Button from './Button';\n\nconst ModalContainer = styled.div`\n  position: fixed;\n  background-color: rgba(0, 0, 0, 0.65);\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  z-index: 10;\n`;\n\nconst ModalStyle = styled.div`\n  background: ${color.white};\n  border-radius: 1rem;\n  width: 30rem;\n  height: 18rem;\n  display: flex;\n\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  opacity: 1;\n  z-index: 20;\n  h1 {\n    padding: 1rem;\n  }\n`;\n\nconst Modal = props => {\n  const [winnerMessage, setWinnerMessage] = useState('');\n  const { resetHandler, firstPlayerScore, secondPlayerScore } = props;\n  const firstPlayerWon = firstPlayerScore > secondPlayerScore;\n  const tieGame = firstPlayerScore === secondPlayerScore;\n  useEffect(() => {\n    if (tieGame) {\n      setWinnerMessage(`It's a Tie!`);\n    } else if (firstPlayerWon) {\n      setWinnerMessage(`Player 1 Wins with ${firstPlayerScore} Points!`);\n    } else {\n      setWinnerMessage(`Player 2 Wins with ${secondPlayerScore} Points!`);\n    }\n  }, '');\n\n  return (\n    <ModalContainer>\n      <ModalStyle>\n        <h1>{winnerMessage}</h1>\n\n        <Button resetHandler={() => resetHandler()} />\n      </ModalStyle>\n    </ModalContainer>\n  );\n};\n\nexport default Modal;\n","import React from 'react';\nimport Background from '../images/leaves.jpg';\nimport Flippy, { FrontSide, BackSide } from 'react-flippy';\n\nimport { color } from '../utilities';\n\nconst Card = props => {\n  const { id, isFlipped, disabled, cardHandler, cardColor } = props;\n\n  return (\n    <div onClick={() => (disabled ? null : cardHandler(id))} style={{}}>\n      <Flippy\n        isFlipped={isFlipped}\n        flipDirection=\"horizontal\"\n        flipOnClick={false}\n        style={{ width: '20vmin', height: '20vmin' }}\n      >\n        <FrontSide\n          style={{\n            backgroundImage: `linear-gradient(to bottom right, ${\n              color.white\n            }66, ${color.black}8C ), url(${Background})`,\n            border: `solid 0.2rem ${color.white}`,\n            borderRadius: '0.5rem'\n          }}\n        />\n        <BackSide\n          style={{\n            backgroundColor: cardColor,\n            borderColor: `${color.white}`,\n            border: `solid 0.3rem ${color.white}`,\n            borderRadius: '0.5rem'\n          }}\n        />\n      </Flippy>\n    </div>\n  );\n};\n\nexport default Card;\n","// The Deck of 12 Cards\n\nexport const Deck = [\n  {\n    id: '1',\n    cardColor: '#000000',\n    type: 'black'\n  },\n  {\n    id: '2',\n    cardColor: '#ffe119',\n    type: 'yellow'\n  },\n  {\n    id: '3',\n    cardColor: '#f58231',\n    type: 'orange'\n  },\n  {\n    id: '4',\n    cardColor: '#469990',\n    type: 'teal'\n  },\n  {\n    id: '5',\n    cardColor: '#800000',\n    type: 'maroon'\n  },\n  {\n    id: '6',\n    cardColor: '#f032e6',\n    type: 'pink'\n  },\n  {\n    id: '7',\n    cardColor: '#000000',\n    type: 'black'\n  },\n  {\n    id: '8',\n    cardColor: '#ffe119',\n    type: 'yellow'\n  },\n  {\n    id: '9',\n    cardColor: '#f58231',\n    type: 'orange'\n  },\n  {\n    id: '10',\n    cardColor: '#469990',\n    type: 'teal'\n  },\n  {\n    id: '11',\n    cardColor: '#800000',\n    type: 'maroon'\n  },\n  {\n    id: '12',\n    cardColor: '#f032e6',\n    type: 'pink'\n  }\n];\n","import React, { useState, useEffect } from 'react';\nimport { color } from './utilities';\nimport { shuffle } from './functions';\n\nimport { MainLayout, PlayerArea, CardArea } from './layouts/Main';\nimport Modal from './layouts/Modal';\nimport Button from './layouts/Button';\nimport Card from './cards/Card';\nimport { Deck } from './cards/Deck';\n\nconst App = () => {\n  const [cards, setCards] = useState([]);\n  const [isFlipped, setFlipped] = useState([]);\n  const [solved, setSolved] = useState([]);\n  const [disabled, setDisabled] = useState(false);\n  const [firstPlayerScore, setFirstPlayerScore] = useState(0);\n  const [secondPlayerScore, setSecondPlayerScore] = useState(0);\n  const [winner, setWinner] = useState(false);\n\n  // If true, player one. If false, player two.\n  const [player, setPlayer] = useState(true);\n\n  //Runs when App is mounted\n  useEffect(() => {\n    setCards(shuffle(Deck));\n  }, []);\n\n  const resetGame = () => {\n    setCards([]);\n    setFlipped([]);\n    setSolved([]);\n    setDisabled(false);\n    setFirstPlayerScore(0);\n    setSecondPlayerScore(0);\n    setPlayer(true);\n    setWinner(false);\n    setCards(shuffle(Deck));\n  };\n\n  const sameCardClickedTwice = id => isFlipped.includes(id);\n\n  const isAMatch = id => {\n    const clickedCard = cards.find(card => card.id === id);\n    const flippedCard = cards.find(card => isFlipped[0] === card.id);\n    return flippedCard.type === clickedCard.type;\n  };\n  const checkEndOfGame = () => {\n    const totalScore = firstPlayerScore + secondPlayerScore;\n    if (totalScore >= 5) {\n      // Win Condition\n      setWinner(true);\n      // console.log(`end of game`);\n    }\n  };\n  const resetCards = () => {\n    setFlipped([]);\n    setDisabled(false);\n    switchPlayer();\n  };\n\n  const switchPlayer = () => {\n    setPlayer(!player);\n  };\n\n  const scorePlayer = () => {\n    if (player) {\n      setFirstPlayerScore(firstPlayerScore + 1);\n    } else if (!player) {\n      setSecondPlayerScore(secondPlayerScore + 1);\n    }\n    checkEndOfGame();\n  };\n\n  const resetHandler = () => {\n    // console.log('reset');\n    resetGame();\n  };\n  const cardHandler = id => {\n    setDisabled(true);\n    if (isFlipped.length === 0) {\n      setFlipped(isFlipped => [...isFlipped, id]);\n      //If none selected, flip card\n      setDisabled(false);\n    } else if (sameCardClickedTwice(id)) {\n      //If same Card flip back and switch players\n      isFlipped.pop(id);\n      setTimeout(resetCards, 1000);\n    } else if (isFlipped.length <= 1) {\n      // Allows for second card; but no more than 2\n      setFlipped(isFlipped => [...isFlipped, id]);\n      setDisabled(false);\n      if (isAMatch(id)) {\n        //Checks for match then handles resets and scoring\n        setSolved([...solved, ...isFlipped, id]);\n        resetCards();\n        scorePlayer();\n        switchPlayer();\n      } else {\n        // Allows a second to remember cards and then un-flips\n        setTimeout(resetCards, 1000);\n      }\n    }\n  };\n\n  return (\n    <MainLayout>\n      {winner ? (\n        <Modal\n          firstPlayerScore={firstPlayerScore}\n          secondPlayerScore={secondPlayerScore}\n          resetHandler={() => resetHandler()}\n        />\n      ) : (\n        <></>\n      )}\n      {/* <Modal resetHandler={() => resetHandler()} /> */}\n      <PlayerArea\n        style={{\n          background: `${color.red}`,\n          opacity: `${player ? '1' : '0.15'}`\n        }}\n      >\n        <h2>PLAYER 1</h2>\n        <h1>{firstPlayerScore}</h1>\n      </PlayerArea>\n      <CardArea style={{ background: `${color.black}` }}>\n        {cards.map(card => (\n          <Card\n            key={card.id}\n            id={card.id}\n            isFlipped={solved.includes(card.id) || isFlipped.includes(card.id)}\n            solved={solved.includes(card.id)}\n            disabled={disabled || solved.includes(card.id)}\n            cardHandler={() => cardHandler(card.id)}\n            cardColor={card.cardColor}\n          />\n        ))}\n        <Button resetHandler={() => resetHandler()} />\n      </CardArea>\n      <PlayerArea\n        style={{\n          background: `${color.blue}`,\n          opacity: `${player ? '0.15' : '1'}`\n        }}\n      >\n        <h2>PLAYER 2</h2>\n        <h1>{secondPlayerScore}</h1>\n      </PlayerArea>\n    </MainLayout>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}